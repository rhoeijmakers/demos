<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Niksen Demo</title>
    <link>https://demo.niksen.site/</link>
    <description>Recent content on Niksen Demo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Nov 2020 21:08:45 +0100</lastBuildDate><atom:link href="https://demo.niksen.site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSS Backgrounds</title>
      <link>https://demo.niksen.site/posts/cssbackground/</link>
      <pubDate>Tue, 24 Nov 2020 21:08:45 +0100</pubDate>
      
      <guid>https://demo.niksen.site/posts/cssbackground/</guid>
      <description>.content { background-color: #E5E5F7; opacity: 0.5 ; background-image: radial-gradient(#0d23e9 1px, transparent 1px), radial-gradient(#0d23e9 1px, #E5E5F7 1px); background-size: 40px 40px; background-position: 0 0,20px 20px; }  CSS Background There is this great website that offers a nice range of CSS-backgrounds. You can customize them and download the CSS code for free.
https://www.magicpattern.design/tools/css-backgrounds/</description>
    </item>
    
    <item>
      <title>Retina images</title>
      <link>https://demo.niksen.site/posts/retina/</link>
      <pubDate>Wed, 18 Nov 2020 21:09:45 +0100</pubDate>
      
      <guid>https://demo.niksen.site/posts/retina/</guid>
      <description>Retina images  Small excercise in how to work with retina images in HTML. Picture and source With source you can give a screen width and load a different image for a range of widths. Nor sure if these images are tgen displayed as Retina.
    &amp;lt;picture&amp;gt; &amp;ltsource media=&#34;(min-width:1400px)&#34; srcset=&#34;sea-4000px.jpg&#34;&amp;gt; &amp;ltsource media=&#34;(min-width:750px)&#34; srcset=&#34;sea-2000px.jpg&#34;&amp;gt; &amp;ltsource media=&#34;(min-width:510px)&#34; srcset=&#34;sea-1000px.jpg&#34;&amp;gt; &amp;ltsource media=&#34;(max-width:509px)&#34; srcset=&#34;sea-500px.jpg&#34;&amp;gt; &amp;ltimg src=&#34;sea.jpg&#34; alt=&#34;Sea&#34; style=&#34;width:auto;&#34;&amp;gt; &amp;lt/picture   Img, srcset and x This code picks a fixed image.</description>
    </item>
    
    <item>
      <title>Hugo framework for building websites</title>
      <link>https://demo.niksen.site/posts/hugo/</link>
      <pubDate>Sun, 15 Nov 2020 21:09:45 +0100</pubDate>
      
      <guid>https://demo.niksen.site/posts/hugo/</guid>
      <description>Hugo framework I build this demo website with Hugo. Hugo is a framework to build a static website using Markdown and/or HTML-files. In order for this to work I had to install Hugo on my Mac and then find a template to layout the content. With this you can build your site locally and then commit to Github. I then connected Github with Netlify which builds and publishes the site to the web.</description>
    </item>
    
    <item>
      <title>Browser image support</title>
      <link>https://demo.niksen.site/posts/imagesupport/</link>
      <pubDate>Thu, 12 Nov 2020 12:15:02 +0000</pubDate>
      
      <guid>https://demo.niksen.site/posts/imagesupport/</guid>
      <description>Does my browser support WebP and/or AVIF A quick check to see if your browser or application supports modern image formats. WebP If the browser supports WebP the label on the image will indicate this and a green check will be shown. If the image label says WebP the browser supports the format, when the label says JPG the browser does not support and falls back on JPG. A red cross appears.</description>
    </item>
    
    <item>
      <title>Scalable Vector Graphics (SVG)</title>
      <link>https://demo.niksen.site/posts/svg/</link>
      <pubDate>Tue, 27 Oct 2020 21:09:45 +0100</pubDate>
      
      <guid>https://demo.niksen.site/posts/svg/</guid>
      <description>Currently at the time of writing, we would recommend you to go with &amp;lt;img&amp;gt; tags as the simplest option and &amp;lt;object&amp;gt; tags only if you require interactivity in your graphics. Avoid Inline SVG in order to be indexed in Google Image.
1. SVG images 2. Img tag in object tag  3. Embedded in HTML 5 SVG tag .cls-1,.cls-2,.cls-3,.cls-4{fill:none;stroke-miterlimit:10;stroke-width:8px;}.cls-1{stroke:#52b0bf;}.cls-2{stroke:#a3cc83;}.cls-3{stroke:#e7bb03;}.cls-4{stroke:#f5a488;}.cls-5{fill:#43433d;} Embedded SVG with attribute sizing and coloring     </description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://demo.niksen.site/posts/syntax/</link>
      <pubDate>Sat, 30 May 2020 16:01:23 +0800</pubDate>
      
      <guid>https://demo.niksen.site/posts/syntax/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloWorld&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Native lazy loading</title>
      <link>https://demo.niksen.site/posts/lazyloading/</link>
      <pubDate>Fri, 27 Dec 2019 21:09:45 +0100</pubDate>
      
      <guid>https://demo.niksen.site/posts/lazyloading/</guid>
      <description> Lazy loading Some browsers now have native lazy loading. Here is an example.
Summer Autumn Winter Spring  if (&#39;loading&#39; in HTMLImageElement.prototype) { // Browser supports `loading`.. console.log(&#34;Lazy&#34;); } else { // Fetch and apply a polyfill/JavaScript library // for lazy-loading instead. console.log(&#34;No Lazy&#34;); }  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://demo.niksen.site/about/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://demo.niksen.site/about/</guid>
      <description>About demo.niksen.site This is a demo site for &amp;lt;niksen.site&amp;gt;.
Here I test code in order to demo it. And I experimented with the setup of Hugo and Netlify, together with Github and Markdown files.</description>
    </item>
    
    <item>
      <title>Screen resolution</title>
      <link>https://demo.niksen.site/posts/resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://demo.niksen.site/posts/resolution/</guid>
      <description>function getViewportWidth() { if (window.innerWidth) { return window.innerWidth; } else if (document.body &amp;&amp; document.body.offsetWidth) { return document.body.offsetWidth; } else { return 0; } } function getViewportHeight() { if (window.innerHeight) { return window.innerHeight; } else if (document.body &amp;&amp; document.body.offsetHeight) { return document.body.offsetHeight; } else { return 0; } } var tellMeTheSizes=function() { document.getElementById(&#34;viewportwidth&#34;).innerHTML = getViewportWidth() + &#34;px&#34;; document.getElementById(&#34;viewportheight&#34;).innerHTML = getViewportHeight() + &#34;px&#34;; document.getElementById(&#34;resolutionheight&#34;).innerHTML = screen.height + &#34;px&#34;; document.getElementById(&#34;resolutionwidth&#34;).innerHTML = screen.width + &#34;</description>
    </item>
    
  </channel>
</rss>
